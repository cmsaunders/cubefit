#!/usr/bin/env python
"""Subtract model determined by cubefit from the original data.

The input FITS header is passed unaltered to the output file, with the
following additions:
- A `HISTORY` entry.
- `CBFT_SNX` and `CBFT_SNY` keywords giving the cubefit-determined position of
  the SN relative to the center of the data array (at the reference
  wavelength).
"""

from argparse import ArgumentParser
import logging
import os
import json
import shutil

import fitsio

import cubefit

if __name__ == "__main__":

    progname = "cubefit-subtract"
    progname_ver = "{} v{}".format(progname, cubefit.__version__)

    parser = ArgumentParser(prog=progname, description=__doc__)
    parser.add_argument("configfile", help="configuration file name "
                        "(JSON format); same as cubefit input")
    parser.add_argument("resultfile", help="Result FITS file from cubefit")
    parser.add_argument("--dataprefix", default="",
                        help="path prepended to data file names; default is "
                        "empty string")
    parser.add_argument("--outprefix", default="",
                        help="path prepended to output file names; default is "
                        "empty string")
    args = parser.parse_args()

    cubefit.setup_logging(logging.INFO)

    # get input & output filenames
    with open(args.configfile) as f:
        cfg = json.load(f)
    fnames = [os.path.join(args.dataprefix, fname)
              for fname in cfg["filenames"]]
    outfnames = [os.path.join(args.outprefix, fname)
                 for fname in cfg["outnames"]]

    # load results
    results = cubefit.read_results(args.resultfile)
    epochs = results["epochs"]
    sny, snx = results["snctr"]
    if not len(epochs) == len(fnames) == len(outfnames):
        raise RuntimeError("number of epochs in result file not equal to "
                           "number of input and output files in config file")

    # subtract
    for fname, outfname, epoch in zip(fnames, outfnames, epochs):
        logging.info("writing %s", outfname)
        shutil.copy(fname, outfname)
        f = fitsio.FITS(outfname, "rw")
        data = f[0].read()
        data -= epoch["galeval"]
        f[0].write(data)
        f[0].write_history("galaxy subtracted by " + progname_ver)
        f[0].write_key("CBFT_SNX", snx - epoch['xctr'],
                       comment="SN x offset from array center at ref wave")
        f[0].write_key("CBFT_SNY", sny - epoch['yctr'],
                       comment="SN y offset from array center at ref wave")
        f.close()

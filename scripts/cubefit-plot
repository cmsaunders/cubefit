#!/usr/bin/env python
"""Plot results and diagnostics from cubefit"""

from __future__ import print_function

import glob
from argparse import ArgumentParser
from os.path import join, basename
import json
from collections import OrderedDict
import numpy as np

import cubefit


# arguments are the same as cubefit except an output 
parser = ArgumentParser(prog="cubefit-plot", description=__doc__)
parser.add_argument("configfile", help="configuration filename")
parser.add_argument("resultfile", help="Result filename from cubefit")
parser.add_argument("outprefix", help="output prefix")
parser.add_argument("--dataprefix", default="",
                    help="path prepended to data file names; default is "
                    "empty string")
parser.add_argument('-b', '--band', help='timeseries band (U, B, V). '
                    'Default is a 1000 A wide band in middle of cube.',
                    default=None, dest='band')
parser.add_argument('--idrfiles', nargs='+', default=None,
                    help='Prefix of IDR. If given, the cubefit SN '
                    'spectra are plotted against the production values.')
parser.add_argument("--diagdir", default=None,
                    help="If given, read intermediate diagnostic "
                    "results from this directory and include in plot(s)")
parser.add_argument("--plotepochs", default=False,
                    help="Make diagnostic plots for each epoch")

args = parser.parse_args()

# Read in data
with open(args.configfile) as f:
    cfg = json.load(f)
cubes = [cubefit.read_datacube(join(args.dataprefix, fname), scale=False)
         for fname in cfg["filenames"]]

# Read in results, optionally with diagnostics.
results = OrderedDict()
if args.diagdir is not None:
    fnames = sorted(glob.glob(join(args.diagdir, "step*.fits")))
    for fname in fnames:
        name = basename(fname).split(".")[0]
        results[name] = cubefit.read_results(fname)
results["final"] = cubefit.read_results(args.resultfile)

cubefit.plot_timeseries(cubes, results, band=args.band,
                        fname=(args.outprefix + '_timeseries.png'))

# plot wave slices, just for final refs.
refcubes = [cubes[i] for i in cfg['refs']]
refgaleval = results['final']['epochs']['galeval'][cfg['refs']]
cubefit.plot_wave_slices(refcubes, refgaleval,
                         fname=(args.outprefix + '_waveslice.png'))

# Plot cubefit spectra against IDR spectra.
if args.idrfiles is not None:
    cubefit.plot_sn(cfg['filenames'], results['final']['epochs']['sn'],
                    results['final']['wave'], args.idrfiles,
                    args.outprefix + '_sn.png')

# Plot wave slices and sn, galaxy and sky spectra for all epochs.
if args.plotepochs:
    for i_t in range(len(cubes)):
        cubefit.plot_epoch(cubes, results, i_t, 
                           fname=(args.outprefix + '_epoch%s.png' % i_t))

# Plot the x-y coordinates of the adr versus wavelength.
cubefit.plot_adr(cfg, cubes[0].wave, fname=(args.outprefix + '_adr.png'))

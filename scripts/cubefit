#!/usr/bin/env python
"""Fit SN + galaxy model to SNFactory data cubes."""

from argparse import ArgumentParser
import logging

import cubefit


parser = ArgumentParser(prog="cubefit", description=__doc__)
parser.add_argument("configfile", help="configuration filename")
parser.add_argument("datadir", help="directory containing FITS data files")
parser.add_argument("outfile", help="Output filename (pickle format)")
parser.add_argument("--logfile", help="Write log to this file",
                    default=None)
parser.add_argument("--loglevel", default="info",
                    help="one of: debug, info, warning (default is info)")
parser.add_argument("--diagdir", default=None,
                    help="If given, write intermediate diagnostic results to "
                    "this directory")
parser.add_argument("--refitgal", default=False, action="store_true",
                    help="Add an iteration where galaxy model is fit using "
                    "all epochs and then data/SN positions are refit")
parser.add_argument("--mu_wave", default=None, type=float,
                    help="Override the wavelength regularization hyperparameter")
parser.add_argument("--mu_xy", default=None, type=float,
                    help="Override the spatial regularization hyperparameter")
parser.add_argument("--masterref", default=None, type=int,
                    help="Choose index of exposure used as master ref")
args = parser.parse_args()

# translate loglevel to numeric value
numlevel = getattr(logging, args.loglevel.upper(), None)
if not isinstance(numlevel, int):
    print('Invalid log level: %s' % loglevel)
    exit(1)
fit_parameters = {'mu_wave' : args.mu_wave, 'mu_xy' : args.mu_xy,
                  'master_ref' : args.masterref}

cubefit.main(args.configfile, args.datadir, args.outfile,
             logfname=args.logfile, loglevel=numlevel, diagdir=args.diagdir,
             refitgal=args.refitgal, fit_params=fit_parameters)

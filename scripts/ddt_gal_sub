#!/usr/bin/env python
from __future__ import print_function

import ddtpy
import numpy as np

def main():
    from argparse import ArgumentParser

    parser = ArgumentParser(
        description="DDT: Datacube Deconvolution Thingy")
    parser.add_argument("filename", help="path to configuration file")

    args = parser.parse_args()
    
    ### Setup the DDT object ###
    ddt = ddtpy.DDT(args.filename)
    
    ### First iteration of fitting the model ###
    ddtpy.optim_toolbox.fit_model_all_epoch(ddt, 
                                            maxiter=ddt.n_iter_galaxy_prior)
                                            
    
    ### Go through the galaxy registration process ###
    recalculate=1
    maxiter_fit_position=100
    n_spaxel_max_sn = 3.
    n_spaxel_max_galaxy= 3.
    mask_weight = 2.5
    
    # Setup the re-weighting for the alignment refinment 
    weight_orig = ddt.weight
    new_weight = ddt.weight
    #print "<update_registration> MSG: masking weight %s sigma" % mask_weight
    r_weight = ddtpy.fit_toolbox.calc_residual(ddt, 
                                               sn=np.zeros((ddt.nt, ddt.nw)))
    
    # Register the galaxy in the other final refs 
    i_fit_galaxy_position = np.where(ddt.is_final_ref)
    n_final_ref = i_fit_galaxy_position[0].size
    galaxy_offset = np.zeros((ddt.nt, 2))
    


main()
